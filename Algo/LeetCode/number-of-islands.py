class Solution:
    def numIslands(self, grid):
        lg = len(grid)
        if lg == 0:
            return 0
        lw = len(grid[0])

        vi = [[False for i in range(lw)] for j in range(lg)]
        
        ans = 0
        for i in range(lg):
            for j in range(lw):
                if not vi[i][j]:
                    vi[i][j] = True
                    if grid[i][j] == '1':
                        ans += 1
                        q = set([(i,j)])
                        while len(q) != 0:
                            # print(len(q))
                            a = q.pop()
                            vi[a[0]][a[1]] = True
                            def shouldAdd(i, j):
                                return (i < lg) and (j < lw) and (i >=0) and (j >= 0) and (vi[i][j] == False) and (grid[i][j] == '1')
                            poss = [[a[0]+1, a[1]], [a[0], a[1]+1], [a[0]-1, a[1]], [a[0], a[1]-1]]
                            for pp in poss:
                                if shouldAdd(pp[0], pp[1]):
                                    q.add((pp[0], pp[1]))
        return ans
                        

s = Solution()
assert(s.numIslands([["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]) == 1)
assert(s.numIslands([["1","1","1"],["0","1","0"],["1","1","1"]]) == 1)