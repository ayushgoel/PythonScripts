import pprint

import math
class Solution:
    def maxPoints(self, points):
        lp = len(points)
        if lp <= 1:
            return lp
        d = {}
        for i in range(lp):
            for j in range(i+1, lp):
                if points[i] == points[j]:
                    continue
                m1 = points[j][1]-points[i][1]
                m2 = points[j][0]-points[i][0]
                if m1<0:
                    m1 = -m1
                    m2 = -m2
                gd = math.gcd(m1,m2)
                if gd != 0:
                    m1 = int(m1/gd)
                    m2 = int(m2/gd)
                dd = (m2*points[j][1]) - (m1*points[j][0])
                dd2 = (m2*points[i][1]) - (m1*points[i][0])
                assert(dd == dd2)
                k = (m1,m2,dd)
                if k not in d:
                    d[k] = set()
                d[k].add(i)
                d[k].add(j)
        # pprint.pprint(d)
        if len(d.keys()) == 0: # all repetitions
            return lp
        return max([len(i) for i in d.values()])

s = Solution()
assert(s.maxPoints([[1,1],[2,2],[3,3]]) == 3)
assert(s.maxPoints([[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]) == 4)
assert(s.maxPoints([[1,1]]) == 1)
assert(s.maxPoints([]) == 0)
assert(s.maxPoints([[1,1], [5,3]]) == 2)
assert(s.maxPoints([[0,0],[0,0]]) == 2)
assert(s.maxPoints([[0,0],[-1,-1],[2,2]]) == 3)
assert(s.maxPoints([[0,0],[1,1],[0,0]]) == 3)
assert(s.maxPoints([[40,-23],[9,138],[429,115],[50,-17],[-3,80],[-10,33],[5,-21],[-3,80],[-6,-65],[-18,26],[-6,-65],[5,72],[0,77],[-9,86],[10,-2],[-8,85],[21,130],[18,-6],[-18,26],[-1,-15],[10,-2],[8,69],[-4,63],[0,3],[-4,40],[-7,84],[-8,7],[30,154],[16,-5],[6,90],[18,-6],[5,77],[-4,77],[7,-13],[-1,-45],[16,-5],[-9,86],[-16,11],[-7,84],[1,76],[3,77],[10,67],[1,-37],[-10,-81],[4,-11],[-20,13],[-10,77],[6,-17],[-27,2],[-10,-81],[10,-1],[-9,1],[-8,43],[2,2],[2,-21],[3,82],[8,-1],[10,-1],[-9,1],[-12,42],[16,-5],[-5,-61],[20,-7],[9,-35],[10,6],[12,106],[5,-21],[-5,82],[6,71],[-15,34],[-10,87],[-14,-12],[12,106],[-5,82],[-46,-45],[-4,63],[16,-5],[4,1],[-3,-53],[0,-17],[9,98],[-18,26],[-9,86],[2,77],[-2,-49],[1,76],[-3,-38],[-8,7],[-17,-37],[5,72],[10,-37],[-4,-57],[-3,-53],[3,74],[-3,-11],[-8,7],[1,88],[-12,42],[1,-37],[2,77],[-6,77],[5,72],[-4,-57],[-18,-33],[-12,42],[-9,86],[2,77],[-8,77],[-3,77],[9,-42],[16,41],[-29,-37],[0,-41],[-21,18],[-27,-34],[0,77],[3,74],[-7,-69],[-21,18],[27,146],[-20,13],[21,130],[-6,-65],[14,-4],[0,3],[9,-5],[6,-29],[-2,73],[-1,-15],[1,76],[-4,77],[6,-29]]) == 25)